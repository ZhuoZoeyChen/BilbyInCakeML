modification of AfsS

1. move simp into a declare block 

``definition
  i_dir_update :: "(dir \<Rightarrow> dir) \<Rightarrow> afs_inode \<Rightarrow> afs_inode"
 where
  "i_dir_update m i \<equiv> i \<lparr>i_type:= IDir (m (i_dir i)) \<rparr>"

declare i_dir_update_def[simp]``

instead of 

``definition
  i_dir_update :: "(dir \<Rightarrow> dir) \<Rightarrow> afs_inode \<Rightarrow> afs_inode"
 where
  i_dir_update_def[simp]:
  "i_dir_update m i \<equiv> i \<lparr>i_type:= IDir (m (i_dir i)) \<rparr>"
``

2. deleted comments and text blocks (should add back in later after fixed parser)


----------------------------
TODOs:

1.Comment 

-- cmtTermL :: ParserM Term
-- cmtTermL = cmtL termL

-- cmtL :: ParserM a -> a 
-- cmtL p = do { stringL "(*"; r <- p; stringL "*)"; return r }

-- commentL :: ParserM String
-- commentL = do
--     content <- cmtTermL
--     return $ content 

commentL :: ParserM (L Dcl)
commentL = do 
  reserved "\\<comment>"
  reserved "\\<open>"
  cmt <- 
  reserved "\\<close>"
  return $ Dcl name rules 


2. option map 

  OpMap     -> BinOpRec AssocRight  "\\<rightharpoonup>"

3.
subsTermL :: ParserM Term 
subsTermL = try $ do 
  name <- nameL 
  stringL "\\<^sub>"
  subscript <- nameL 
  return $ TermApp (TermApp (TermIdent $ Id "subscript") (TermIdent $ Id name)) (TermIdent $ Id subscript) 


  4. Isabelle/Pure; Isabelle/HOL ?

  5. might want to check associativity for termbinOp 

  6. Linux Kernel FS
    fs/read_write.c 


7. one minute talk 

In the development of trustworthy systems, we need to prove the end to end correctness of operating system services such as
file systems, which is our choice of case study. 

The green part here is called virtual file systems (VFS), which is an interface between users and file systems.
Currently we have two pieces of proofs, here and here. One in CakeML language showing the correctness of user's system calls down to VFS,
and one in Cogent language showing the correctness of a specific file system called BilbyFS up until VFS.

To combine these two proofs and close the proving gaps, we need to fill out and prove VFS. 

Our research idea is to transplant the specification of BilbyFs into CakeML, then write a specification for VFS using that, 
and finally prove from VFS spec to CakeML spec.
After these, we will have the complete end to end proof of the whole file system service using BilbyFS and therefore increase the overall trustworthiness of 
computer systems. 

